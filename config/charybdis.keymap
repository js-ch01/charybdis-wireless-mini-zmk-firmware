#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

#define LBASE 0
#define LSYM 1
#define LNAV 2
#define LNUM 3
#define LFUNC 4
#define LGAME 5
#define LMSE 6
#define LTRAC 7
#define LTOG 8
#define LSCR 9
#define LSCRH 10

&caps_word {
};

/ {
    trackball_auto_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <LBASE LTOG>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <3>;
        bindings = <&ib_toggle_layer LTRAC>;
    };

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <LGAME LMSE LTRAC>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <3>;
    };

    // input config for snipe mode

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <LSYM>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <7>;
    };

    // input config for mouse scroll mode

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <LSCR>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 32>;
    };

    // input config for mouse scroll mode (horizontal)

    trackball_h_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <LSCRH>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_HWHEEL>;
        y-input-code = <INPUT_REL_MISC>;
        bindings = <&ib_h_wheel_scaler 1 32>;
    };

    // define a resolution down scaler only for INPUT_REL_WHEEL

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    // define a resolution down scaler only for INPUT_REL_HWHEEL (horizontal)

    ib_h_wheel_scaler: ib_h_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_HWHEEL>;
    };

    // adjust cooldown waiting period for mouse key layer after activated

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <1000>;
    };

    behaviors {
        ht_mo_to: ht_moL_toL {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };

        ht_hm_rshft: hm_Rshift {
            compatible = "zmk,behavior-hold-tap";
            label = "ht_hm_rshft";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <160>;
            quick-tap-ms = <155>;
        };

        ht_hm_lshft: hm_Lshift {
            compatible = "zmk,behavior-hold-tap";
            label = "ht_hm_lshft";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <160>;
            quick-tap-ms = <220>;
        };

        ht_hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "Homerow Mod";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
            quick-tap-ms = <220>;
        };

        gt_gte: gt_hold_gte {
            compatible = "zmk,behavior-hold-tap";
            label = "GT_GTE";
            bindings = <&gte>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lt_lte: lt_hold_lte {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_LTE";
            bindings = <&lte>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lpar_lr: lpar_hold_lr {
            compatible = "zmk,behavior-hold-tap";
            label = "LPAR_LR";
            bindings = <&double_parenthesis_lr>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lbrace_lr: lbrace_hold_lr {
            compatible = "zmk,behavior-hold-tap";
            label = "LBRACE_LR";
            bindings = <&double_braces_lr>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lbracket_lr: lbracket_hold_lr {
            compatible = "zmk,behavior-hold-tap";
            label = "LBRACKET_LR";
            bindings = <&double_brackets_lr>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lt_mkp: lt_moL_mouseKP {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_MOUSEKP";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ht_mkp: ht_mouseKP_KP {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MOUSEKP";
            bindings = <&mkp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        mm_test: mm_test {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_TEST";
            bindings = <&kp A>, <&kp B>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lpar {
            timeout-ms = <46>;
            key-positions = <16 15>;
            bindings = <&lpar_lr 0 LEFT_PARENTHESIS>;
            layers = <0 1>;
        };

        combo_rpar {
            timeout-ms = <45>;
            key-positions = <19 20>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };

        combo_lbkt {
            timeout-ms = <45>;
            key-positions = <14 16>;
            bindings = <&lbracket_lr 0 LEFT_BRACKET>;
            layers = <0 1>;
        };

        combo_rbkt {
            timeout-ms = <45>;
            key-positions = <19 21>;
            bindings = <&kp RBKT>;
            layers = <0>;
        };

        combo_lbrc {
            timeout-ms = <45>;
            key-positions = <14 15>;
            bindings = <&lbrace_lr 0 LEFT_BRACE>;
            layers = <0 1>;
        };

        combo_rbrc {
            timeout-ms = <45>;
            key-positions = <20 21>;
            bindings = <&kp RIGHT_BRACE>;
            layers = <0>;
        };

        combo_lt {
            bindings = <&lt_lte 0 LT>;
            key-positions = <16 15 14>;
            timeout-ms = <46>;
            layers = <0 1>;
        };

        combo_gt {
            bindings = <&gt_gte 0 GT>;
            key-positions = <19 20 21>;
            timeout-ms = <45>;
            layers = <0>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <27 15>;
            layers = <0 7>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <16 28>;
            layers = <0 7>;
        };

        combo_num0 {
            bindings = <&kp N0>;
            key-positions = <31 19>;
            layers = <0 1 3 7>;
        };

        combo_num1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <32 20>;
            layers = <0 1 3 7>;
        };

        combo_num2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <33 21>;
            layers = <0 1 3 7>;
        };

        combo_meta+a {
            bindings = <&kp LG(A)>;
            key-positions = <38 37>;
            layers = <0 7>;
        };

        combo_altF4 {
            bindings = <&kp LA(F4)>;
            key-positions = <1 4>;
            layers = <0 7>;
        };

        combo_del {
            bindings = <&kp DELETE>;
            key-positions = <31 33>;
            layers = <0 1 2 6 7>;
        };

        combo_escL {
            bindings = <&kp ESCAPE>;
            key-positions = <28 27>;
            layers = <0 1 2 6 7>;
        };

        combo_escR {
            bindings = <&kp ESCAPE>;
            key-positions = <31 32>;
            layers = <0 1 2 6 7>;
        };

        combo_toggle_Trackball {
            bindings = <&tog 8>;
            key-positions = <31 34>;
            layers = <0 7 8>;
        };

        combo_toggle_scroll {
            bindings = <&tog 9>;
            key-positions = <36 37>;
            layers = <0 7 8 9>;
        };

        combo_toggle_game {
            bindings = <&tog 6>;
            key-positions = <24 35>;
            layers = <0 6>;
        };

        combo_kor {
            bindings = <&kp LANG_HANGEUL>;
            key-positions = <40 39>;
            layers = <0 6>;
        };

        combo_eng_hanja {
            bindings = <&kp LANG_HANJA>;
            key-positions = <18 30>;
            layers = <0 6>;
        };

        combo_space {
            bindings = <&kp SPACE>;
            key-positions = <16 4>;
            layers = <0 7>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <3 15>;
            layers = <0 7>;
        };

        combo_bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 19>;
        };

        combo_caps {
            bindings = <&caps_word>;
            key-positions = <2 14>;
            layers = <0 7>;
        };
    };

    macros {
        gte: gte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp GT &kp EQUAL>;

            label = "GTE";
        };

        lte: lte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LT &kp EQUAL>;

            label = "LTE";
        };

        double_parenthesis_lr: double_parenthesis_lr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LPAR &kp RPAR>;

            label = "DOUBLE_PARENTHESIS_LR";
        };

        double_braces_lr: double_braces_lr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LBRC &kp RBRC>;

            label = "DOUBLE_BRACES_LR";
        };

        double_brackets_lr: double_brackets_lr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 5>, <&kp LBKT &kp RBKT>;

            label = "DOUBLE_BRACKETS_LR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp ESC    &kp Q              &kp W              &kp E                  &kp R                      &kp T        &kp Y        &kp U                       &kp I                  &kp O              &kp P                      &kp C_VOL_UP
&mkp MCLK  &ht_hm LEFT_WIN A  &ht_hm LEFT_ALT S  &ht_hm LEFT_CONTROL D  &ht_hm_lshft LEFT_SHIFT F  &kp G        &kp H        &ht_hm_rshft RIGHT_SHIFT J  &ht_hm LEFT_CONTROL K  &ht_hm LEFT_ALT L  &ht_hm LEFT_WIN SEMICOLON  &kp C_VOL_DN
&mkp RCLK  &lt 3 Z            &kp X              &lt 9 C                &lt 10 V                   &kp B        &kp N        &ht_mkp LCLK M              &ht_mkp MCLK COMMA     &ht_mkp RCLK DOT   &lt 3 SLASH                &kp C_MUTE
                                                 &mkp LCLK              &lt 1 BACKSPACE            &lt 7 TAB    &lt 4 ENTER  &lt 2 SPACE
            >;
        };

        sym+num_layer {
            bindings = <
&trans  &sk LEFT_META  &sk LEFT_ALT  &sk LCTRL  &sk LEFT_SHIFT    &trans               &kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp PLUS   &trans
&trans  &kp EQUAL      &kp PLUS      &kp MINUS  &kp LEFT_SHIFT    &kp PIPE             &kp SLASH     &kp N4  &kp N5  &kp N6  &kp MINUS  &trans
&trans  &kp UNDER      &kp GRAVE     &kp TILDE  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES    &kp N0        &kp N1  &kp N2  &kp N3  &kp BSLH   &trans
                                     &trans     &trans            &trans               &trans        &kp N0
            >;
        };

        navigation_layer {
            bindings = <
&none  &none     &none     &none             &none           &none     &kp INS             &kp HOME        &kp UP_ARROW  &kp END        &kp PG_UP            &none
&none  &kp LWIN  &kp LALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans    &kp INS             &kp LEFT_ARROW  &kp DOWN      &kp RIGHT      &kp PAGE_DOWN        &none
&none  &none     &none     &none             &none           &none     &kp LA(LEFT_ARROW)  &kp LG(PG_UP)   &none         &kp LG(PG_DN)  &kp LA(RIGHT_ARROW)  &none
                           &trans            &trans          &trans    &trans              &trans
            >;
        };

        number_layer {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &kp T     &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &kp G     &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &kp B     &kp N0  &kp N1  &kp N2  &kp N3  &trans  &trans
                        &kp N0  &trans  &trans    &trans  &kp N0
            >;
        };

        function_layer {
            bindings = <
&bootloader     &out OUT_TOG    &bt BT_SEL 0   &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_CLR    &kp PRINTSCREEN  &kp F7     &kp F8  &kp F9  &kp F12  &trans
&studio_unlock  &kp RIGHT_META  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &trans        &kp SCROLLLOCK   &kp F4     &kp F5  &kp F6  &kp F11  &trans
&trans          &trans          &trans         &trans             &trans           &trans        &kp PAUSE_BREAK  &kp F1     &kp F2  &kp F3  &kp F10  &trans
                                               &trans             &trans           &trans        &trans           &kp K_APP
            >;
        };

        game_layer {
            bindings = <
&kp N1  &kp TAB    &kp Q  &kp W        &kp E      &kp R           &kp Y   &kp U      &kp I      &kp O      &kp P        &kp BACKSPACE
&kp N2  &kp LCTRL  &kp A  &kp S        &kp D      &kp F           &kp H   &kp J      &kp K      &kp L      &kp SEMI     &kp ENTER
&kp N3  &kp LSHFT  &kp Z  &kp X        &kp C      &kp V           &kp N   &mkp LCLK  &mkp MCLK  &mkp RCLK  &lt 3 SLASH  &kp RSHFT
                          &lt 3 GRAVE  &kp SPACE  &kp LEFT_ALT    &trans  &kp M
            >;
        };

        mousekey_layer {
            bindings = <
&trans     &trans          &msc MOVE_LEFT  &mmv MOVE_UP    &msc MOVE_RIGHT  &trans          &none         &none            &none      &none         &none           &none
&mkp LCLK  &msc MOVE_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc MOVE_UP    &none         &kp RIGHT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_META   &none
&trans     &mkp MB4        &mkp LCLK       &mkp MCLK       &mkp RCLK        &mkp MB5        &msc MOVE_UP  &mkp LCLK        &mkp MCLK  &mkp RCLK     &msc MOVE_DOWN  &none
                                           &mkp LCLK       &mkp MCLK        &mkp RCLK       &trans        &trans
            >;
        };

        trackball_layer {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mo 9   &trans
                        &mkp LCLK  &mkp MCLK  &mkp RCLK    &trans  &trans
            >;
        };

        trackball_toggle_layer {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans     &trans          &trans           &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans     &trans          &trans           &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &mkp LCLK  &lt_mkp 9 MCLK  &lt_mkp 10 RCLK  &trans  &trans
                        &mkp LCLK  &mkp MCLK  &mkp RCLK    &trans  &trans
            >;
        };

        scroll_layer {
            bindings = <
&none  &none  &none  &none   &none   &none     &none   &none      &none      &none      &none  &none
&none  &none  &none  &none   &none   &none     &none   &none      &none      &none      &none  &none
&none  &none  &none  &trans  &trans  &none     &none   &mkp LCLK  &mkp MCLK  &mkp RCLK  &none  &none
                     &trans  &trans  &trans    &trans  &trans
            >;
        };

        scroll_horizontal_layer {
            bindings = <
&none  &none  &none  &none   &none   &none     &none   &none      &none      &none      &none  &none
&none  &none  &none  &none   &none   &none     &none   &none      &none      &none      &none  &none
&none  &none  &none  &trans  &trans  &none     &none   &mkp LCLK  &mkp MCLK  &mkp RCLK  &none  &none
                     &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
